% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_data_sample.R
\name{gpt_gen_sample}
\alias{gpt_gen_sample}
\title{Generate Sample of Data Sets}
\usage{
gpt_gen_sample(S, n, theta, eta, theta_sd = 0, eta_sd = 0, file, latent,
  restrictions = NULL, cpu)
}
\arguments{
\item{S}{sample size (number of participants)}

\item{n}{vector of the length of number of trees with n per tree}

\item{theta}{vector of true MPT parameter values (consider also restricted parameters!). Values will be appropriatly reordered if a named vector ist given (otherwise, check order!).}

\item{eta}{vector of true continuous parameters. Values will be appropriatly reordered if a named vector ist given (otherwise, check order!).}

\item{theta_sd}{vector giving the standard deviation of normally distributed MPT parameters across participants (default: homogeneity)}

\item{eta_sd}{vector giving the standard deviation of normally distributed continuous parameters across participants (default: homogeneity)}

\item{file}{a character vector specifying the path to the model file}

\item{latent}{type of latent continuous distribution (one of \code{"normal"}, \code{"exgauss"}, \code{"exwald"}, \code{"gamma"}, \code{"weibull"}, \code{"lognormal"}, \code{"wald"}, or \code{beta}). Can be a  vector if multiple continuous variables \code{y} have different distributions (e.g., \code{latent = c("normal", "gamma")})}

\item{restrictions}{list with parameter restrictions (e.g., \code{list("g=0.5", "mean1=mean2=100")})}

\item{cpu}{number of cores used for data generation (default: number of cores minus one). alternatively, a parallel cluster initialized by `cl <- parallel::makeCluster(4)`}
}
\description{
Allows to simulate parameter heterogeneity. Note that truncated normal distributions are used to ensure that parameters within the specified bounds.
}
\examples{
###### 2-High-Threshold Model (with fixed guessing) ######

\dontrun{
n <- c(targets=20, lures=20)     # number of items
theta <- c(do=.6,dn=.4, g=.5)          # MPT parameters
eta <- c(mu=400, sig=50, lambda_do=200, 
         lambda_go=600, lambda_gn=400, 
         lambda_dn=300)          # exGaussian parameters
file <- paste0(path.package("gpt"), "/models/2htm_exgauss.txt")

gen <- gpt_gen_sample(S=3, n=n, theta=theta, eta=eta, 
                      theta_sd=.1, eta_sd=10,
                      file =file, latent="exgauss")
sapply(gen, head, 3) 
# check mean of latent continuous distributions:
by(gen$data$y, gen$data$state, mean)
}
}
\seealso{
gpt_gen
}
